{"mappings":"AEAO,MAAM,EAAU,KACrB,IAAM,EAAU,SAAS,cAAc,CAAC,WAClC,EAAe,SAAS,cAAc,CAAC,iBAG7C,AAF2B,SAAS,gBAAgB,CAAC,iBAElC,OAAO,CAAC,AAAA,IACzB,EAAO,gBAAgB,CAAC,QAAS,WAC/B,EAAQ,KAAK,CAAC,OAAO,CAAG,OACxB,QAAQ,GAAG,CAAC,uBACZ,QAAQ,GAAG,CAAC,iBAAkB,EAAQ,KAAK,CAAC,OAAO,CACrD,EACF,GAEA,EAAa,gBAAgB,CAAC,QAAS,WACrC,EAAQ,KAAK,CAAC,OAAO,CAAG,MAC1B,GAEA,IAAM,EAAe,KACf,OAAO,UAAU,CAAG,KACtB,CAAA,EAAQ,KAAK,CAAC,OAAO,CAAG,MAD1B,CAGF,EAEA,OAAO,gBAAgB,CAAC,SAAU,GAClC,GACF,ECzBa,EAAQ,KACnB,IAAM,EAAgB,SAAS,gBAAgB,CAC7C,kEAEI,EAAgB,SAAS,cAAc,CAAC,mBACxC,EAAiB,SAAS,cAAc,CAAC,oBAGzC,EAAc,AAAC,IACnB,EAAc,KAAK,CAAC,OAAO,CAAG,EAAS,OAAS,OAChD,EAAe,KAAK,CAAC,OAAO,CAAG,EAAS,OAAS,MACnD,EAGM,EAAa,aAAa,OAAO,CAAC,SAClC,EAAc,OAAO,UAAU,CAAC,gCAAgC,OAAO,CAEvE,EAAS,AAAe,SAAf,GAA0B,CAAC,GAAc,EACxD,SAAS,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,aAAc,GAC7C,EAAY,GAGZ,EAAc,OAAO,CAAC,AAAC,IACrB,EAAO,OAAO,CAAG,EACjB,EAAO,gBAAgB,CAAC,SAAU,KAChC,IAAM,EAAS,SAAS,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,cAC9C,EAAY,GAEZ,EAAc,OAAO,CAAC,AAAC,IACrB,EAAO,OAAO,CAAG,CACnB,GACA,aAAa,OAAO,CAAC,QAAS,EAAS,OAAS,QAClD,EACF,EACF,EF/BA,SAAS,gBAAgB,CAAC,mBAAoB,WAC5C,GAAI,CACF,AAAA,IACA,AAAA,GACF,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CAAC,mBAAoB,EACpC,CACF","sources":["<anon>","src/index.js","src/js/sidebar.js","src/js/theme.js"],"sourcesContent":["const $7290018b6e45da8d$export$6fbb9cd2843e91b2 = ()=>{\n    const sidebar = document.getElementById(\"sidebar\");\n    const closeSidebar = document.getElementById(\"close-sidebar\");\n    const openSidebarButtons = document.querySelectorAll(\"#open-sidebar\");\n    openSidebarButtons.forEach((button)=>{\n        button.addEventListener(\"click\", function() {\n            sidebar.style.display = \"flex\";\n            console.log(\"openSidebar clicked\");\n            console.log(\"Sidebar style:\", sidebar.style.display);\n        });\n    });\n    closeSidebar.addEventListener(\"click\", function() {\n        sidebar.style.display = \"none\";\n    });\n    const handleResize = ()=>{\n        if (window.innerWidth > 768) sidebar.style.display = \"none\";\n    };\n    window.addEventListener(\"resize\", handleResize);\n    handleResize();\n};\n\n\nconst $db12283b528bfe21$export$bca14c5b3b88a9c9 = ()=>{\n    const toggleButtons = document.querySelectorAll(\"#theme-toggle-light, #theme-toggle-dark, #theme-toggle-sidebar\");\n    const darkThemeLogo = document.getElementById(\"dark-theme-logo\");\n    const lightThemeLogo = document.getElementById(\"light-theme-logo\");\n    // Helper function to update logos\n    const updateLogos = (isDark)=>{\n        darkThemeLogo.style.display = isDark ? \"flex\" : \"none\";\n        lightThemeLogo.style.display = isDark ? \"none\" : \"flex\";\n    };\n    // Load saved theme from localStorage\n    const savedTheme = localStorage.getItem(\"theme\");\n    const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n    const isDark = savedTheme === \"dark\" || !savedTheme && prefersDark;\n    document.body.classList.toggle(\"dark-theme\", isDark);\n    updateLogos(isDark);\n    // Set the state of all toggles\n    toggleButtons.forEach((button)=>{\n        button.checked = isDark;\n        button.addEventListener(\"change\", ()=>{\n            const isDark = document.body.classList.toggle(\"dark-theme\");\n            updateLogos(isDark);\n            toggleButtons.forEach((toggle)=>{\n                toggle.checked = isDark;\n            });\n            localStorage.setItem(\"theme\", isDark ? \"dark\" : \"light\");\n        });\n    });\n};\n\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    try {\n        (0, $db12283b528bfe21$export$bca14c5b3b88a9c9)();\n        (0, $7290018b6e45da8d$export$6fbb9cd2843e91b2)();\n    } catch (error) {\n        console.error(\"Error in script:\", error);\n    }\n});\n\n\n//# sourceMappingURL=Tasty-Treats.b0db68a2.js.map\n","import { sidebar } from \"./js/sidebar\";\r\nimport { theme } from \"./js/theme\";\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function () {\r\n  try {\r\n    theme();\r\n    sidebar();\r\n  } catch (error) {\r\n    console.error(\"Error in script:\", error);\r\n  }\r\n});\r\n","export const sidebar = () => {\r\n  const sidebar = document.getElementById(\"sidebar\");\r\n  const closeSidebar = document.getElementById(\"close-sidebar\");\r\n  const openSidebarButtons = document.querySelectorAll(\"#open-sidebar\");\r\n\r\n  openSidebarButtons.forEach(button => {\r\n    button.addEventListener(\"click\", function () {\r\n      sidebar.style.display = \"flex\";\r\n      console.log(\"openSidebar clicked\");\r\n      console.log(\"Sidebar style:\", sidebar.style.display);\r\n    });\r\n  });\r\n\r\n  closeSidebar.addEventListener(\"click\", function () {\r\n    sidebar.style.display = \"none\";\r\n  });\r\n\r\n  const handleResize = () => {\r\n    if (window.innerWidth > 768) {\r\n      sidebar.style.display = \"none\";\r\n    }\r\n  };\r\n\r\n  window.addEventListener(\"resize\", handleResize);\r\n  handleResize();\r\n};\r\n","export const theme = () => {\r\n  const toggleButtons = document.querySelectorAll(\r\n    \"#theme-toggle-light, #theme-toggle-dark, #theme-toggle-sidebar\"\r\n  );\r\n  const darkThemeLogo = document.getElementById(\"dark-theme-logo\");\r\n  const lightThemeLogo = document.getElementById(\"light-theme-logo\");\r\n\r\n  // Helper function to update logos\r\n  const updateLogos = (isDark) => {\r\n    darkThemeLogo.style.display = isDark ? \"flex\" : \"none\";\r\n    lightThemeLogo.style.display = isDark ? \"none\" : \"flex\";\r\n  };\r\n\r\n  // Load saved theme from localStorage\r\n  const savedTheme = localStorage.getItem(\"theme\");\r\n  const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\r\n\r\n  const isDark = savedTheme === \"dark\" || (!savedTheme && prefersDark);\r\n  document.body.classList.toggle(\"dark-theme\", isDark);\r\n  updateLogos(isDark);\r\n\r\n  // Set the state of all toggles\r\n  toggleButtons.forEach((button) => {\r\n    button.checked = isDark;\r\n    button.addEventListener(\"change\", () => {\r\n      const isDark = document.body.classList.toggle(\"dark-theme\");\r\n      updateLogos(isDark);\r\n\r\n      toggleButtons.forEach((toggle) => {\r\n        toggle.checked = isDark;\r\n      });\r\n      localStorage.setItem(\"theme\", isDark ? \"dark\" : \"light\");\r\n    });\r\n  });\r\n};\r\n"],"names":["$7290018b6e45da8d$export$6fbb9cd2843e91b2","sidebar","document","getElementById","closeSidebar","openSidebarButtons","querySelectorAll","forEach","button","addEventListener","style","display","console","log","handleResize","window","innerWidth","$db12283b528bfe21$export$bca14c5b3b88a9c9","toggleButtons","darkThemeLogo","lightThemeLogo","updateLogos","isDark","savedTheme","localStorage","getItem","prefersDark","matchMedia","matches","body","classList","toggle","checked","setItem","error"],"version":3,"file":"Tasty-Treats.b0db68a2.js.map"}